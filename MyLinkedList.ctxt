#BlueJ class context
comment0.target=MyLinkedList
comment0.text=\n\ \n
comment1.params=a
comment1.target=MyLinkedList(java.lang.Object)
comment1.text=\n\ MyLinkedList\ constructor\ creates\ a\ new\ MyLinkedList\ object\ that\ \n\ creates\ a\ new\ node\ with\ object\ of\ the\ a\ generic\ class\ and\ creates\ a\n\ head\ and\ tail\ node\n\ \n\ @param\ A\ a\ variable\ 'a'\ is\ an\ object\ of\ A\ which\ is\ a\ generic\ class\n
comment10.params=
comment10.target=void\ print()
comment10.text=\n\ print\ function\ prints\ out\ the\ element\ of\ each\ node\ \n\ as\ long\ as\ there\ a\ next\ node\n\ \n\ @return\ \ void\n
comment11.params=
comment11.target=boolean\ isEmpty()
comment11.text=\n\ isEmpty\ method\ checks\ to\ see\ if\ the\ linkedList\ is\ empty\ \n\ which\ is\ determined\ by\ whether\ the\ head\ does\ not\ have\ a\ next\ and\ does\ not\ have\ a\ value\n\ \n\ @return\ boolean\ -\ it\ returns\ true\ or\ false\ \n\ @param\ there's\ none\n
comment2.params=
comment2.target=MyLinkedList()
comment3.params=
comment3.target=MyLinkedList.Node\ returnHead()
comment3.text=\n\ This\ method\ returns\ the\ head\ of\ the\ linked\ list\n\ \n\ @param\ -\ there's\ none\ \n
comment4.params=
comment4.target=MyLinkedList.Node\ returnTail()
comment4.text=\n\ This\ method\ returns\ the\ tail\ of\ the\ linked\ list\n\ \n\ @param\ -\ there's\ none\ \n
comment5.params=b
comment5.target=MyLinkedList.Node\ getNode(int)
comment5.text=\n\ This\ method\ returns\ the\ Node\ at\ a\ specific\ point\ in\ the\ list\ \n\ \n\ @param\ -\ an\ integer\ that\ will\ allow\ the\ method\ move\ through\ the\ list\ until\ it\ reaches\ the\ "index"\ of\ the\ Node\n
comment6.params=a
comment6.target=void\ addFirst(java.lang.Object)
comment6.text=\n\ addFirst\ function\ adds\ an\ element\ in\ a\ new\ Node\ to\ \n\ the\ beginning\ of\ each\ Linked\ list\n\ \n\ @return\ \ void\ \ \n\ @param\ \ \ a\ \ variable\ 'a'\ is\ an\ object\ of\ a\ generic\ class\ \n
comment7.params=a
comment7.target=void\ addEnd(java.lang.Object)
comment7.text=\n\ addEnd\ function\ adds\ an\ element\ in\ a\ new\ Node\ to\n\ the\ end\ of\ each\ Linked\ List\n\n\ @return\ \ void\n\ @param\ \ \ a\ variable\ 'a'\ is\ an\ object\ of\ a\ generic\ class\n
comment8.params=b
comment8.target=java.lang.Object\ getElement(int)
comment8.text=\n\ getElement\ function\ gets\ an\ element\ from\ a\ node\ \n\ in\ a\ Linked\ List\ based\ on\ which\ node\ the\ user\ wants\n\ \n\ @return\ \ A\ which\ is\ the\ current\ value\ of\ the\ node\ \n\ which\ is\ an\ object\ of\ a\ generic\ class\n\ @param\ \ \ int\ b\ variable\ 'b'\ is\ an\ integer\ \n\ that\ tells\ the\ while\ loop\ which\ node\ to\ stop\ at\ and\ return\ the\ node's\ value\n
comment9.params=
comment9.target=java.util.Iterator\ iterator()
comment9.text=\n\ This\ method\ returns\ a\ new\ MyLinkedListIteraror\ object\ which\ is\ the\ iterator\ for\ the\ MyLinkedList\ class\n\ \n\ @param\ -\ there's\ none\n
numComments=12
